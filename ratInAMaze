#include <bits/stdc++.h> 
vector<int> convert(vector<vector<int>> vec){
  vector<int> returnVec;
  for(auto x:vec){
    for(auto y:x){
      returnVec.push_back(y);
    }
  }
  return returnVec;
}

void rec(vector<vector<int> > &maze, int n , vector<vector<int>> * ans , int x, int y ,  vector<vector<int>> visited,vector<vector<int>> temp){
  if(maze[x][y] ==0 || x>=n || y>=n || y<0 ||x<0 || visited[x][y] ==1){
    return ;
  } 
  if(x == n-1 && y == n-1){
    ans->push_back(convert(temp));
    return ;
  }
  visited[x][y] = 1;
  if(x+1<n && maze[x+1][y] == 1 &&  visited[x+1][y] ==0){
    temp[x+1][y] = 1;
    rec(maze , n , ans,x+1,y,visited,temp);
    temp[x+1][y] = 0;
  }
  if(y+1<n && maze[x][y+1] == 1 &&  visited[x][y+1] ==0){
    temp[x][y+1] = 1;
    rec(maze , n , ans,x,y+1,visited,temp);
    temp[x][y+1] = 0;
  }
  if(x-1>=0 && maze[x-1][y] == 1 &&  visited[x-1][y] ==0){
    temp[x-1][y] = 1;
    rec(maze , n , ans,x-1,y,visited,temp);
    temp[x-1][y] = 0;
    }
  if( y-1>=0 && maze[x][y-1] == 1 &&  visited[x][y-1] ==0){
    temp[x][y-1] = 1;
    rec(maze , n , ans,x,y-1,visited,temp);
    temp[x][y-1] = 0;
    }

}

vector<vector<int>> ratInAMaze(vector<vector<int> > &maze, int n){
  vector<vector<int>> ans;
  vector<vector<int>> visited;
  vector<vector<int>> temp;
  temp.resize(n,vector<int>(n,0));
  visited.resize(n,vector<int>(n,0));
  // ans.resize(n,vector<int>(n,0));
  if(maze[0][0] == 1){
    temp[0][0] = 1;
  }
  rec(maze, n,&ans , 0,0,visited, temp);
  return ans;
}
